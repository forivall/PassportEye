#!/usr/bin/env python3

import time
start_tic = time.time()

import argparse
import json
import os
from os import path
import sys
from skimage import io

dirname = path.dirname(__file__)

sys.path.append(path.dirname(dirname))

from passporteye.mrz.image import extract_rois

def main():
    """
    Command-line script for extracting MRZ from a given image
    """
    parser = argparse.ArgumentParser(description='Extract MRZ ROIs from the image.')
    filename_or_ipc = parser.add_mutually_exclusive_group(required=True)
    filename_or_ipc.add_argument('filename', nargs='?')
    filename_or_ipc.add_argument('--ipc', action="store_true", help="listen on stdin for cli arguments, and run in a loop")
    parser.add_argument('-d', '--roi-dir', default=None,
                        help='Output the region of the image that is detected to contain the MRZ to the given png file. '
                        'With --roi-only, this is a directory, and the files created will be at 1.png, 2.png, ...')
    parser.add_argument('--id', default=None,
                        help="return this value in the json result to ensure consisteny")
    parser.add_argument('--verbose', '-v', action='count', default=0)
    args = parser.parse_args()
    
    if args.verbose:
        print('ready in %f seconds' % (time.time() - start_tic), file=sys.stderr)
    if args.ipc:
        line = sys.stdin.readline()
        while line and line not in ('exit\n', '"exit"\n'):
            try:
                lineargv = json.loads(line)
            except json.JSONDecodeError:
                lineargv = line.split()
            subargs = parser.parse_args(lineargv)
            if not subargs.verbose:
                subargs.verbose = args.verbose
            if subargs.ipc:
                # this is like a simple ping to ensure the worker is responsive
                print('{"status": "OK"}')
                line = sys.stdin.readline()
                continue
            files = run(subargs)
            print(toJson(subargs, files))
            sys.stdout.flush()
            line = sys.stdin.readline()
    else:
        files = run(args)
        print(toJson(args, files))

def toJson(args, files):
    # TODO: add more information if needed
    return json.dumps({
        'id': args.id,
        'filename': args.filename,
        'roiDir': args.roi_dir,
        'roiFiles': files,
    })

def run(args):
    if args.verbose:
        tick = time.time()
        print('extracting...', file=sys.stderr)
    rois = extract_rois(args.filename)
    if args.verbose:
        tock = time.time()
        walltime = tock - tick
        print('extracted in %f seconds' % walltime, file=sys.stderr)
    roi_dir = '.'
    if args.roi_dir is not None:
        roi_dir = args.roi_dir
        os.makedirs(roi_dir, exist_ok=True)

    files = []
    for n, img in enumerate(rois, 1):
        roi_fn = '%d.png' % (n)
        filename = os.path.join(roi_dir, roi_fn)
        io.imsave(filename, img)
        files.append(filename)
    if args.verbose:
        tick = time.time()
        print('wrote files in %f seconds' % (tick - tock), file=sys.stderr)
    return files

if __name__ == '__main__':
    main()
